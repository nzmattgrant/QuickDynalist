{"version":3,"sources":["components/Setup.tsx","components/Inbox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Setup","props","setDynalistToken","a","apiKey","state","dynalistApiToken","dynalistApi","DynalistApi","listFiles","testResult","_code","localStorage","setItem","history","push","Error","toast","error","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","handleChange","event","setState","target","value","className","style","width","height","top","left","margin","flexDirection","href","type","marginRight","this","onChange","onClick","Component","Inbox","clearKey","removeItem","sendTextToInbox","console","log","inboxInput","sendToInbox","result","success","dynalistApiKey","getItem","bottom","display","justifyContent","alignItems","App","basename","process","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc4daedb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { DynalistApi } from 'dynalist-api';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport class Setup extends Component<any, { dynalistApiToken: string }> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { dynalistApiToken: '' };\r\n  }\r\n\r\n  setDynalistToken = async () => {\r\n    const apiKey = this.state.dynalistApiToken;\r\n    const dynalistApi = new DynalistApi(apiKey, 0);\r\n    try {\r\n      const testResult = (await dynalistApi.listFiles()) as any;\r\n      if (testResult._code && testResult._code === 'Ok') {\r\n        localStorage.setItem('quick-dynalist-api-key', apiKey);\r\n        this.props.history.push('/');\r\n        return;\r\n      }\r\n      if (testResult._code && testResult._code === 'InvalidToken') {\r\n        throw new Error('Invalid token entered');\r\n      }\r\n      throw new Error('Request not accepted');\r\n    } catch (e) {\r\n      toast.error((e as Error).message, {\r\n        position: 'bottom-right',\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleChange = (event: any) => {\r\n    this.setState({ dynalistApiToken: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className='container square-box d-flex justify-content-center'\r\n        style={{\r\n          width: '500px',\r\n          height: '200px',\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '50%',\r\n          margin: '-150px 0 0 -250px',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        <div>\r\n          <h1>Enter Dynalist API token</h1>\r\n        </div>\r\n        <div>\r\n          <p>\r\n            Enter your api token found{' '}\r\n            <a target='_blank' href='https://dynalist.io/developer'>\r\n              here\r\n            </a>\r\n          </p>\r\n          <p>this key will only be held locally on your browser and will not be sent to any server</p>\r\n        </div>\r\n        <div>\r\n          {' '}\r\n          <input\r\n            type='text'\r\n            style={{ width: '400px', marginRight: '10px' }}\r\n            value={this.state.dynalistApiToken}\r\n            onChange={this.handleChange}\r\n          />\r\n          <button className='btn btn-primary' onClick={this.setDynalistToken}>\r\n            Enter\r\n          </button>\r\n        </div>\r\n        <ToastContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { Component } from 'react';\r\nimport { DynalistApi } from 'dynalist-api';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport class Inbox extends Component<any, { dynalistApiToken: string; inboxInput: string }> {\r\n  private dynalistApi?: DynalistApi;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { dynalistApiToken: '', inboxInput: '' };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dynalistApiKey = localStorage.getItem('quick-dynalist-api-key') as string;\r\n    //check if we have the api token\r\n    //if not redirect to setup\r\n    console.log(dynalistApiKey);\r\n    if (!dynalistApiKey) {\r\n      this.props.history.push('/Setup');\r\n    }\r\n    this.dynalistApi = new DynalistApi(dynalistApiKey, 0);\r\n  }\r\n\r\n  clearKey = () => {\r\n    localStorage.removeItem('quick-dynalist-api-key');\r\n    this.props.history.push('/Setup');\r\n  };\r\n\r\n  sendTextToInbox = async () => {\r\n    try {\r\n      console.log(this.state.inboxInput);\r\n      const result = await this.dynalistApi?.sendToInbox(this.state.inboxInput);\r\n      console.log('sent to inbox', result);\r\n      toast.success('Sent to inbox', {\r\n        position: 'bottom-right',\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      this.setState({ inboxInput: '' });\r\n    } catch (e) {\r\n      toast.error((e as Error).message, {\r\n        position: 'bottom-right',\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleChange = (event: any) => {\r\n    this.setState({ inboxInput: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ position: 'absolute',\r\n        top: '0px',\r\n        bottom: '20px',\r\n        width: '100%'}}>\r\n        <div>\r\n          <button style={{ margin: '10px' }} className='btn btn-danger' onClick={this.clearKey}>\r\n            Clear dynalist key\r\n          </button>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            flexDirection: 'column',\r\n            height: 'calc(100% - 120px)'\r\n          }}\r\n        >\r\n          <div>\r\n            <h1>Add to inbox</h1>\r\n          </div>\r\n          <div>\r\n            <input\r\n              style={{ width: '400px', marginRight: '10px' }}\r\n              type='text'\r\n              value={this.state.inboxInput}\r\n              onChange={this.handleChange}\r\n            />\r\n            <button className='btn btn-primary' onClick={this.sendTextToInbox}>\r\n              Add\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <ToastContainer />\r\n      </div>\r\n    );\r\n  }\r\n}","import './App.css';\nimport {Route, BrowserRouter as Router} from 'react-router-dom'\nimport { Setup } from './components/Setup';\nimport { Inbox } from './components/Inbox';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n        <Route exact path='/' component={Inbox} />\n        <Route exact path='/setup' component={Setup} />\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}